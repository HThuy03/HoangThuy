# -*- coding: utf-8 -*-
"""Bankdata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oGUbJ-tu_8BJtyrFjp59OcpmxUbfaTnc
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
path="/content/drive/MyDrive/CSV/bank-data_xuly.csv"
dataset=pd.read_csv(path)

dataset.describe()

# Hiển thị ngắn gọn các thông tin số lượng mẫu dữ liệu, số lượng chiều của các mẫu dữ liệu của bộ dữ liệu
dataset.info()

#15 mẫu đầu tiên của bộ dữ liệu
dataset.head(15)

"""Câu 1b"""

#biểu đồ dạng cột
import pandas as pd
import matplotlib.pyplot as plt

df = pd.DataFrame(data)

# Chọn các cột bạn muốn vẽ
columns_to_plot = ['age', 'income', 'children']

# Vẽ biểu đồ cột cho các cột đã chọn
df[columns_to_plot].plot(kind='bar', figsize=(10, 6))
plt.title('Biểu đồ cột cho DataFrame')
plt.xlabel('Index')
plt.ylabel('Value')
plt.xticks(ticks=range(len(df)), labels=df['id'])
plt.legend(title='Columns')
plt.show()

#Biểu đồ dạng hộp (box)
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

df = pd.DataFrame(dataset)

# Lọc các cột số
numeric_columns = df.select_dtypes(include=['int64', 'float64']).columns

# Vẽ biểu đồ hộp
plt.figure(figsize=(12, 8))
sns.boxplot(data=df[numeric_columns])
plt.title('Biểu đồ hộp cho DataFrame')
plt.xlabel('Các cột')
plt.ylabel('Giá trị')
plt.xticks(rotation=45)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

df = pd.DataFrame(dataset)

# Chọn cột 'age' và 'income' cho trục x và y
x_column = 'age'
y_column = 'income'

# Tạo một biểu đồ phân tán với màu sắc biểu thị giới tính
plt.figure(figsize=(10, 6))
plt.scatter(df[x_column], df[y_column], c=df['sex'], cmap='viridis', alpha=0.8)
plt.colorbar(label='Sex')
plt.title(f'Scatter plot giữa {x_column} và {y_column} với màu sắc biểu thị giới tính')
plt.xlabel(x_column)
plt.ylabel(y_column)
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

df = pd.DataFrame(dataset)

# Chọn cột 'age' cho biểu đồ histogram
column = 'age'

# Vẽ biểu đồ histogram
plt.figure(figsize=(10, 6))
plt.hist(df[column], bins=10, color='skyblue', edgecolor='black', alpha=0.7)
plt.title(f'Histogram cho cột {column}')
plt.xlabel(column)
plt.ylabel('Tần suất')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Chọn các cột làm biến độc lập và biến phụ thuộc
x_column = 'age'  # Thay <Tên cột độc lập> bằng tên cột làm biến độc lập
y_column = 'income'  # Thay <Tên cột phụ thuộc> bằng tên cột làm biến phụ thuộc

# Lấy dữ liệu từ DataFrame
x = dataset[x_column]
y = dataset[y_column]

# Kích thước của hình vẽ
width = 8
height = 6

# Tạo hình vẽ và vẽ biểu đồ đường
plt.figure(figsize=(width, height))  # Kích thước của hình vẽ (tùy chọn)
plt.plot(x, y, marker='o', linestyle='-')  # marker='o' để hiển thị điểm dữ liệu, linestyle='-' để kết nối các điểm

# Cấu hình các thông tin trên biểu đồ
plt.title('Line Plot of ' + y_column + ' vs ' + x_column)  # Tiêu đề của biểu đồ
plt.xlabel('X Axis Label')  # Nhãn trục x
plt.ylabel('Y Axis Label')  # Nhãn trục y
plt.grid(True)  # Hiển thị lưới (tùy chọn)

# Hiển thị biểu đồ
plt.show()

import pandas as pd
import matplotlib.pyplot as plt


df = pd.DataFrame(dataset)

# Tính toán số lượng tuổi
sex_counts = df['age'].value_counts()

# Vẽ biểu đồ tròn
plt.figure(figsize=(8, 6))
plt.pie(sex_counts, labels=sex_counts.index, autopct='%1.1f%%', startangle=140, colors=['skyblue', 'lightcoral'])
plt.title('Biểu đồ phân phối tuổi')
plt.axis('equal')  # Đảm bảo biểu đồ tròn
plt.show()

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

df = pd.DataFrame(dataset)

# Loại bỏ cột 'id' vì không phải là dữ liệu số
df_numeric = df.drop(columns=['id'])

# Vẽ biểu đồ cặp đôi các thuộc tính
plt.figure(figsize=(10, 8))
sns.pairplot(df_numeric)
plt.suptitle('Biểu đồ cặp đôi các thuộc tính')
plt.show()

"""Câu 2a"""

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt


df = pd.DataFrame(dataset)

# Loại bỏ cột 'id' vì không phải là dữ liệu số
df_numeric = df.drop(columns=['id'])

# Tính toán ma trận tương quan
corr_matrix = df_numeric.corr()

# Vẽ biểu đồ heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", annot_kws={"size": 10})
plt.title('Biểu đồ heatmap của ma trận tương quan')
plt.show()

"""Câu 2b"""

from sklearn.preprocessing import MinMaxScaler, StandardScaler
import pandas as pd

df = pd.DataFrame(dataset)

# Loại bỏ cột 'id'
df_numeric = df.drop(columns=['id'])

# Chuẩn hóa bằng phương pháp bình thường hóa (MinMaxScaler)
scaler_minmax = MinMaxScaler()
df_normalized_minmax = pd.DataFrame(scaler_minmax.fit_transform(df_numeric), columns=df_numeric.columns)

# Chuẩn hóa bằng phương pháp chuẩn hóa (StandardScaler)
scaler_standard = StandardScaler()
df_standardized = pd.DataFrame(scaler_standard.fit_transform(df_numeric), columns=df_numeric.columns)

# Hiển thị 10 mẫu dữ liệu đầu tiên sau khi chuẩn hóa bằng phương pháp bình thường hóa
print("Dữ liệu sau khi được chuẩn hóa bằng phương pháp Min-Max:")
print(df_normalized_minmax.head(10))

# Hiển thị 10 mẫu dữ liệu đầu tiên sau khi chuẩn hóa bằng phương pháp chuẩn hóa
print("\nDữ liệu sau khi được chuẩn hóa bằng phương pháp chuẩn hóa:")
print(df_standardized.head(10))

"""Câu 3a"""

from sklearn.model_selection import train_test_split
import pandas as pd

df = pd.DataFrame(dataset)

# Loại bỏ cột 'id'
df_numeric = df.drop(columns=['id'])

# Tách biến độc lập và biến phụ thuộc
X = df_numeric.drop(columns=['pep'])  # Đặc trưng
y = df_numeric['pep']  # Biến phụ thuộc

# Phân chia bộ dữ liệu thành tập dữ liệu huấn luyện và tập dữ liệu kiểm thử
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Hiển thị kích thước của tập dữ liệu huấn luyện và tập dữ liệu kiểm thử
print("Kích thước của tập dữ liệu huấn luyện:", X_train.shape, y_train.shape)
print("Kích thước của tập dữ liệu kiểm thử:", X_test.shape, y_test.shape)

"""Câu 3b"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import pandas as pd
from sklearn.model_selection import train_test_split

df = pd.DataFrame(dataset)

# Loại bỏ cột 'id'
df_numeric = df.drop(columns=['id'])

# Tách biến độc lập và biến phụ thuộc
X = df_numeric.drop(columns=['pep'])  # Đặc trưng
y = df_numeric['pep']  # Biến phụ thuộc

# Phân chia bộ dữ liệu thành tập dữ liệu huấn luyện và tập dữ liệu kiểm thử
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Xây dựng mô hình cây quyết định
model = DecisionTreeClassifier(random_state=42)

# Huấn luyện mô hình trên tập dữ liệu huấn luyện
model.fit(X_train, y_train)

# Đánh giá mô hình trên tập dữ liệu huấn luyện
train_accuracy = model.score(X_train, y_train)
print("Độ chính xác trên tập dữ liệu huấn luyện:", train_accuracy)

"""Câu 3c"""

from sklearn.metrics import accuracy_score
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

df = pd.DataFrame(dataset)

# Loại bỏ cột 'id'
df_numeric = df.drop(columns=['id'])

# Tách biến độc lập và biến phụ thuộc
X = df_numeric.drop(columns=['pep'])  # Đặc trưng
y = df_numeric['pep']  # Biến phụ thuộc

# Phân chia bộ dữ liệu thành tập dữ liệu huấn luyện và tập dữ liệu kiểm thử
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Xây dựng mô hình cây quyết định
model = DecisionTreeClassifier(random_state=42)

# Huấn luyện mô hình trên tập dữ liệu huấn luyện
model.fit(X_train, y_train)

# Kiểm thử mô hình trên tập dữ liệu kiểm thử
y_pred = model.predict(X_test)

# Hiển thị thông tin giá trị thực tế và kết quả dự đoán tương ứng
results = pd.DataFrame({'Giá trị thực tế': y_test, 'Kết quả dự đoán': y_pred})
print(results)

"""Câu 4a"""

from sklearn.metrics import confusion_matrix
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

df = pd.DataFrame(dataset)

# Loại bỏ cột 'id'
df_numeric = df.drop(columns=['id'])

# Tách biến độc lập và biến phụ thuộc
X = df_numeric.drop(columns=['pep'])  # Đặc trưng
y = df_numeric['pep']  # Biến phụ thuộc

# Phân chia bộ dữ liệu thành tập dữ liệu huấn luyện và tập dữ liệu kiểm thử
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Xây dựng mô hình cây quyết định
model = DecisionTreeClassifier(random_state=42)

# Huấn luyện mô hình trên tập dữ liệu huấn luyện
model.fit(X_train, y_train)

# Kiểm thử mô hình trên tập dữ liệu kiểm thử
y_pred = model.predict(X_test)

# Đánh giá hiệu năng của mô hình sử dụng ma trận nhầm lẫn
conf_matrix = confusion_matrix(y_test, y_pred)
print("Ma trận nhầm lẫn:")
print(conf_matrix)

"""TN (True Negative): Số lượng trường hợp âm tích cực đã được dự đoán đúng.
FP (False Positive): Số lượng trường hợp âm tiêu cực đã bị dự đoán sai (dự đoán là tích cực).
FN (False Negative): Số lượng trường hợp tích cực đã bị dự đoán sai (dự đoán là tiêu cực).
TP (True Positive): Số lượng trường hợp tích cực đã được dự đoán đúng.

Câu 4b
"""

from sklearn.metrics import accuracy_score, mean_squared_error
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

df = pd.DataFrame(dataset)

# Loại bỏ cột 'id'
df_numeric = df.drop(columns=['id'])

# Tách biến độc lập và biến phụ thuộc
X = df_numeric.drop(columns=['pep'])  # Đặc trưng
y = df_numeric['pep']  # Biến phụ thuộc

# Phân chia bộ dữ liệu thành tập dữ liệu huấn luyện và tập dữ liệu kiểm thử
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Phân chia tập dữ liệu kiểm thử thành tập dữ liệu kiểm tra và tập dữ liệu validation
X_test, X_val, y_test, y_val = train_test_split(X_test, y_test, test_size=0.2, random_state=42)

# Xây dựng mô hình cây quyết định
model = DecisionTreeClassifier(random_state=42)

# Huấn luyện mô hình trên tập dữ liệu huấn luyện
model.fit(X_train, y_train)

# Đánh giá hiệu năng của mô hình trên tập dữ liệu validation
y_pred_val = model.predict(X_val)
accuracy_val = accuracy_score(y_val, y_pred_val)
mse_val = mean_squared_error(y_val, y_pred_val)

print("Độ chính xác accuracy trên tập dữ liệu validation:", accuracy_val)
print("Sai số trung bình bình phương MSE trên tập dữ liệu validation:", mse_val)

Câu 5

age = 48 # @param {type:"number"}
income = 17546.00 # @param {type:"number"}
children = 1 # @param {type:"number"}
pep = 0 # @param {type:"number"}